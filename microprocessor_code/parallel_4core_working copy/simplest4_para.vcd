$date
	Wed Jan 22 20:58:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module simplest4_para_tb $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 $ accumulator_output0 $end
$var reg 1 % clk $end
$var reg 1 & counter_ram8_reset $end
$var reg 1 ' preset $end
$scope module uut $end
$var wire 1 % clk $end
$var wire 1 & counter_ram8_reset $end
$var wire 1 ' preset $end
$var wire 16 ( stack_out3 [15:0] $end
$var wire 16 ) stack_out2 [15:0] $end
$var wire 16 * stack_out1 [15:0] $end
$var wire 16 + stack_out0 [15:0] $end
$var wire 16 , ram8_out3 [15:0] $end
$var wire 16 - ram8_out2 [15:0] $end
$var wire 16 . ram8_out1 [15:0] $end
$var wire 16 / ram8_out0 [15:0] $end
$var wire 17 0 dataout_address_and_condition3 [16:0] $end
$var wire 17 1 dataout_address_and_condition2 [16:0] $end
$var wire 17 2 dataout_address_and_condition1 [16:0] $end
$var wire 17 3 dataout_address_and_condition0 [16:0] $end
$var wire 1 4 d3 $end
$var wire 1 5 d2 $end
$var wire 1 6 d1 $end
$var wire 1 7 d0 $end
$var wire 16 8 count_out3 [15:0] $end
$var wire 16 9 count_out2 [15:0] $end
$var wire 16 : count_out1 [15:0] $end
$var wire 16 ; count_out0 [15:0] $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 $ accumulator_output0 $end
$var reg 1 < ram1_clear $end
$var reg 1 = ram8_clear $end
$scope module core0 $end
$var wire 1 % clk $end
$var wire 1 ' preset $end
$var wire 16 > stack_out [15:0] $end
$var wire 16 ? ram8_out [15:0] $end
$var wire 1 @ p_out $end
$var wire 1 A mux_out $end
$var wire 17 B dataout_address_and_condition [16:0] $end
$var wire 1 7 d $end
$var wire 16 C count_out [15:0] $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 $ accumulator_output0 $end
$var wire 1 $ accumulator_output $end
$var reg 1 D accumulator_flipflop_preset $end
$var reg 1 E preset_flipflop_input $end
$scope module accumulator_flipflop $end
$var wire 1 % clk $end
$var wire 1 D preset $end
$var wire 1 $ q $end
$var wire 1 A datain $end
$var reg 1 $ q_reg $end
$upscope $end
$scope module mux $end
$var wire 1 F A $end
$var wire 1 A Y $end
$var wire 1 @ Sel $end
$var wire 1 7 B $end
$upscope $end
$scope module preset_flipflop $end
$var wire 1 % clk $end
$var wire 1 E datain $end
$var wire 1 G preset $end
$var wire 1 @ q $end
$var reg 1 @ q_reg $end
$upscope $end
$scope module stack_jump $end
$var wire 1 % clk $end
$var wire 16 H datain [15:0] $end
$var wire 1 I pop $end
$var wire 1 J push $end
$var reg 16 K dataout [15:0] $end
$var reg 5 L sp [4:0] $end
$upscope $end
$upscope $end
$scope module core1 $end
$var wire 1 $ accumulator_output0 $end
$var wire 1 % clk $end
$var wire 1 ' preset $end
$var wire 16 M stack_out [15:0] $end
$var wire 16 N ram8_out [15:0] $end
$var wire 1 O p_out $end
$var wire 1 P mux_out $end
$var wire 17 Q dataout_address_and_condition [16:0] $end
$var wire 1 6 d $end
$var wire 16 R count_out [15:0] $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 # accumulator_output $end
$var reg 1 S accumulator_flipflop_preset $end
$var reg 1 T preset_flipflop_input $end
$scope module accumulator_flipflop $end
$var wire 1 % clk $end
$var wire 1 S preset $end
$var wire 1 # q $end
$var wire 1 P datain $end
$var reg 1 # q_reg $end
$upscope $end
$scope module mux $end
$var wire 1 U A $end
$var wire 1 P Y $end
$var wire 1 O Sel $end
$var wire 1 6 B $end
$upscope $end
$scope module preset_flipflop $end
$var wire 1 % clk $end
$var wire 1 T datain $end
$var wire 1 V preset $end
$var wire 1 O q $end
$var reg 1 O q_reg $end
$upscope $end
$scope module stack_jump $end
$var wire 1 % clk $end
$var wire 16 W datain [15:0] $end
$var wire 1 X pop $end
$var wire 1 Y push $end
$var reg 16 Z dataout [15:0] $end
$var reg 5 [ sp [4:0] $end
$upscope $end
$upscope $end
$scope module core2 $end
$var wire 1 $ accumulator_output0 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 % clk $end
$var wire 1 ' preset $end
$var wire 16 \ stack_out [15:0] $end
$var wire 16 ] ram8_out [15:0] $end
$var wire 1 ^ p_out $end
$var wire 1 _ mux_out $end
$var wire 17 ` dataout_address_and_condition [16:0] $end
$var wire 1 5 d $end
$var wire 16 a count_out [15:0] $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 " accumulator_output $end
$var reg 1 b accumulator_flipflop_preset $end
$var reg 1 c preset_flipflop_input $end
$scope module accumulator_flipflop $end
$var wire 1 % clk $end
$var wire 1 b preset $end
$var wire 1 " q $end
$var wire 1 _ datain $end
$var reg 1 " q_reg $end
$upscope $end
$scope module mux $end
$var wire 1 d A $end
$var wire 1 _ Y $end
$var wire 1 ^ Sel $end
$var wire 1 5 B $end
$upscope $end
$scope module preset_flipflop $end
$var wire 1 % clk $end
$var wire 1 c datain $end
$var wire 1 e preset $end
$var wire 1 ^ q $end
$var reg 1 ^ q_reg $end
$upscope $end
$scope module stack_jump $end
$var wire 1 % clk $end
$var wire 16 f datain [15:0] $end
$var wire 1 g pop $end
$var wire 1 h push $end
$var reg 16 i dataout [15:0] $end
$var reg 5 j sp [4:0] $end
$upscope $end
$upscope $end
$scope module core3 $end
$var wire 1 $ accumulator_output0 $end
$var wire 1 # accumulator_output1 $end
$var wire 1 " accumulator_output2 $end
$var wire 1 % clk $end
$var wire 1 ' preset $end
$var wire 16 k stack_out [15:0] $end
$var wire 16 l ram8_out [15:0] $end
$var wire 1 m p_out $end
$var wire 1 n mux_out $end
$var wire 17 o dataout_address_and_condition [16:0] $end
$var wire 1 4 d $end
$var wire 16 p count_out [15:0] $end
$var wire 1 ! accumulator_output3 $end
$var wire 1 ! accumulator_output $end
$var reg 1 q accumulator_flipflop_preset $end
$var reg 1 r preset_flipflop_input $end
$scope module accumulator_flipflop $end
$var wire 1 % clk $end
$var wire 1 q preset $end
$var wire 1 ! q $end
$var wire 1 n datain $end
$var reg 1 ! q_reg $end
$upscope $end
$scope module mux $end
$var wire 1 s A $end
$var wire 1 n Y $end
$var wire 1 m Sel $end
$var wire 1 4 B $end
$upscope $end
$scope module preset_flipflop $end
$var wire 1 % clk $end
$var wire 1 r datain $end
$var wire 1 t preset $end
$var wire 1 m q $end
$var reg 1 m q_reg $end
$upscope $end
$scope module stack_jump $end
$var wire 1 % clk $end
$var wire 16 u datain [15:0] $end
$var wire 1 v pop $end
$var wire 1 w push $end
$var reg 16 x dataout [15:0] $end
$var reg 5 y sp [4:0] $end
$upscope $end
$upscope $end
$scope module counter_ram8_0 $end
$var wire 1 % clk $end
$var wire 16 z datain [15:0] $end
$var wire 16 { initial_value [15:0] $end
$var wire 1 | load $end
$var wire 1 & reset $end
$var wire 16 } dataout [15:0] $end
$var reg 16 ~ dataout_reg [15:0] $end
$upscope $end
$scope module counter_ram8_1 $end
$var wire 1 % clk $end
$var wire 16 !" datain [15:0] $end
$var wire 16 "" initial_value [15:0] $end
$var wire 1 #" load $end
$var wire 1 & reset $end
$var wire 16 $" dataout [15:0] $end
$var reg 16 %" dataout_reg [15:0] $end
$upscope $end
$scope module counter_ram8_2 $end
$var wire 1 % clk $end
$var wire 16 &" datain [15:0] $end
$var wire 16 '" initial_value [15:0] $end
$var wire 1 (" load $end
$var wire 1 & reset $end
$var wire 16 )" dataout [15:0] $end
$var reg 16 *" dataout_reg [15:0] $end
$upscope $end
$scope module counter_ram8_3 $end
$var wire 1 % clk $end
$var wire 16 +" datain [15:0] $end
$var wire 16 ," initial_value [15:0] $end
$var wire 1 -" load $end
$var wire 1 & reset $end
$var wire 16 ." dataout [15:0] $end
$var reg 16 /" dataout_reg [15:0] $end
$upscope $end
$scope module ram1 $end
$var wire 14 0" address0 [13:0] $end
$var wire 14 1" address1 [13:0] $end
$var wire 14 2" address2 [13:0] $end
$var wire 14 3" address3 [13:0] $end
$var wire 1 < clear $end
$var wire 1 % clk $end
$var wire 1 $ datain0 $end
$var wire 1 # datain1 $end
$var wire 1 " datain2 $end
$var wire 1 ! datain3 $end
$var wire 1 4" store0 $end
$var wire 1 5" store1 $end
$var wire 1 6" store2 $end
$var wire 1 7" store3 $end
$var wire 17 8" dataout_address_and_condition3 [16:0] $end
$var wire 17 9" dataout_address_and_condition2 [16:0] $end
$var wire 17 :" dataout_address_and_condition1 [16:0] $end
$var wire 17 ;" dataout_address_and_condition0 [16:0] $end
$var wire 1 4 dataout3 $end
$var wire 1 5 dataout2 $end
$var wire 1 6 dataout1 $end
$var wire 1 7 dataout0 $end
$var integer 32 <" i [31:0] $end
$upscope $end
$scope module ram8 $end
$var wire 16 =" address0 [15:0] $end
$var wire 16 >" address1 [15:0] $end
$var wire 16 ?" address2 [15:0] $end
$var wire 16 @" address3 [15:0] $end
$var wire 1 = clear $end
$var wire 16 A" dataout3 [15:0] $end
$var wire 16 B" dataout2 [15:0] $end
$var wire 16 C" dataout1 [15:0] $end
$var wire 16 D" dataout0 [15:0] $end
$var integer 32 E" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx E"
b0 D"
b11 C"
b101 B"
b111 A"
b10010 @"
b1100 ?"
b110 >"
b0 ="
bx <"
b10101011011001xxx ;"
b1011011001xxxxxx :"
b11011001xxxxxxxx 9"
b1011001xxxxxxxxxx 8"
07"
06"
05"
04"
b111 3"
b101 2"
b11 1"
b0 0"
b10010 /"
b10010 ."
0-"
b10010 ,"
b0 +"
b1100 *"
b1100 )"
0("
b1100 '"
b0 &"
b110 %"
b110 $"
0#"
b110 ""
b0 !"
b0 ~
b0 }
0|
b0 {
b0 z
b0 y
b0 x
0w
0v
b10011 u
0t
xs
0r
0q
b10010 p
b1011001xxxxxxxxxx o
xn
xm
b111 l
b0 k
b0 j
b0 i
0h
0g
b1100 f
0e
1d
0c
0b
b1100 a
b11011001xxxxxxxx `
x_
x^
b101 ]
b0 \
b0 [
b0 Z
0Y
0X
b110 W
0V
1U
0T
0S
b110 R
b1011011001xxxxxx Q
xP
xO
b11 N
b0 M
b0 L
b0 K
0J
0I
b1 H
0G
xF
0E
0D
b0 C
b10101011011001xxx B
xA
x@
b0 ?
b0 >
0=
0<
b0 ;
b110 :
b1100 9
b10010 8
17
06
05
14
b10101011011001xxx 3
b1011011001xxxxxx 2
b11011001xxxxxxxx 1
b1011001xxxxxxxxxx 0
b0 /
b11 .
b101 -
b111 ,
b0 +
b0 *
b0 )
b0 (
0'
x&
0%
x$
x#
x"
x!
$end
#1000
0P
0_
1A
1n
1@
1O
1^
1m
1G
1V
1e
1t
1'
#3000
0G
0V
0e
0t
0'
#5000
1F
1s
1P
1_
07
b101011011001xxxx 3
b101011011001xxxx B
b101011011001xxxx ;"
16
b1011011001xxxxxxx 2
b1011011001xxxxxxx Q
b1011011001xxxxxxx :"
15
b11011001xxxxxxxxx 1
b11011001xxxxxxxxx `
b11011001xxxxxxxxx 9"
04
b11001xxxxxxxxxxx 0
b11001xxxxxxxxxxx o
b11001xxxxxxxxxxx 8"
1A
1n
b1 0"
b100 1"
b110 2"
b1000 3"
b1 /
b1 ?
b1 D"
b100 .
b100 N
b100 C"
b110 -
b110 ]
b110 B"
b1000 ,
b1000 l
b1000 A"
1$
0@
0#
0O
0"
0^
1!
0m
b1 H
b1 ;
b1 C
b1 }
b1 ~
b1 ="
b1000 W
b111 :
b111 R
b111 $"
b111 %"
b111 >"
b1110 f
b1101 9
b1101 a
b1101 )"
b1101 *"
b1101 ?"
b10011 u
b10011 8
b10011 p
b10011 ."
b10011 /"
b10011 @"
1%
#10000
0%
#15000
1O
0n
0A
0s
0F
0P
0_
1U
0d
1V
14
b11001xxxxxxxxxxxx 0
b11001xxxxxxxxxxxx o
b11001xxxxxxxxxxxx 8"
x5
bx 1
bx `
bx 9"
06
b1xxxxxxxxxxxxxx 2
b1xxxxxxxxxxxxxx Q
b1xxxxxxxxxxxxxx :"
17
b101011011001xxxxx 3
b101011011001xxxxx B
b101011011001xxxxx ;"
b1001 3"
b10000000000100 2"
15"
b1011 1"
b10 0"
b1001 ,
b1001 l
b1001 A"
b10000000000100 -
b10000000000100 ]
b10000000000100 B"
b1000000000001011 .
b1000000000001011 N
b1000000000001011 C"
b10 /
b10 ?
b10 D"
1#
1"
b10101 u
b10100 8
b10100 p
b10100 ."
b10100 /"
b10100 @"
bx f
b1110 9
b1110 a
b1110 )"
b1110 *"
b1110 ?"
b1000 W
b1000 :
b1000 R
b1000 $"
b1000 %"
b1000 >"
b11 H
b10 ;
b10 C
b10 }
b10 ~
b10 ="
1%
#20000
0%
#25000
1m
1n
1A
0U
1s
1F
1_
1d
0V
1t
x7
xP
b10000000000010 0"
05"
b10000000010000 1"
b10000000001000 2"
17"
b1101 3"
b10000000000010 /
b10000000000010 ?
b10000000000010 D"
b10000000010000 .
b10000000010000 N
b10000000010000 C"
b10000000001000 -
b10000000001000 ]
b10000000001000 B"
b1000000000001101 ,
b1000000000001101 l
b1000000000001101 A"
bx 3
bx B
bx ;"
x6
bx 2
bx Q
bx :"
b1xxxxxxxxxxxxxxxx 0
b1xxxxxxxxxxxxxxxx o
b1xxxxxxxxxxxxxxxx 8"
0$
0#
0"
0!
bx H
b11 ;
b11 C
b11 }
b11 ~
b11 ="
bx W
b1001 :
b1001 R
b1001 $"
b1001 %"
b1001 >"
b1111 9
b1111 a
b1111 )"
b1111 *"
b1111 ?"
b10110 u
b10101 8
b10101 p
b10101 ."
b10101 /"
b10101 @"
1%
#30000
0%
#35000
1^
0A
0F
0_
1d
0t
1e
b10000 f
05
b0xxxxxxxxxxxxxxx 1
b0xxxxxxxxxxxxxxx `
b0xxxxxxxxxxxxxxx 9"
xn
xU
xP
07"
b10000000010000 3"
16"
b1100 2"
b10000000000100 0"
b10000000010000 ,
b10000000010000 l
b10000000010000 A"
b1000000000001100 -
b1000000000001100 ]
b1000000000001100 B"
b10000000000100 /
b10000000000100 ?
b10000000000100 D"
x4
bx 0
bx o
bx 8"
1$
x#
0O
1"
1!
bx u
b10110 8
b10110 p
b10110 ."
b10110 /"
b10110 @"
b10000 9
b10000 a
b10000 )"
b10000 *"
b10000 ?"
b1010 :
b1010 R
b1010 $"
b1010 %"
b1010 >"
b100 ;
b100 C
b100 }
b100 ~
b100 ="
1%
#40000
0%
#45000
1@
1A
0d
1F
1G
b110 H
0e
17
b1110xxxxxxxxxxxxx 3
b1110xxxxxxxxxxxxx B
b1110xxxxxxxxxxxxx ;"
x_
xs
xn
14"
b1010 0"
06"
b10000000010000 2"
b1000000000001010 /
b1000000000001010 ?
b1000000000001010 D"
b10000000010000 -
b10000000010000 ]
b10000000010000 B"
x5
bx 1
bx `
bx 9"
0$
0"
x!
0m
b101 ;
b101 C
b101 }
b101 ~
b101 ="
b1011 :
b1011 R
b1011 $"
b1011 %"
b1011 >"
bx f
b10001 9
b10001 a
b10001 )"
b10001 *"
b10001 ?"
b10111 8
b10111 p
b10111 ."
b10111 /"
b10111 @"
1%
#50000
0%
#55000
1P
bx +"
1U
xt
b10011 f
b1100 W
0G
xv
xw
15
b1010110xxxxxxxxxx 1
b1010110xxxxxxxxxx `
b1010110xxxxxxxxxx 9"
06
b11010110xxxxxxxx 2
b11010110xxxxxxxx Q
b11010110xxxxxxxx :"
0A
xd
x_
x7"
bx 3"
x-"
b111 2"
b101 1"
04"
b11 0"
bx ,
bx l
bx A"
b111 -
b111 ]
b111 B"
b101 .
b101 N
b101 C"
b11 /
b11 ?
b11 D"
07
b1011010110xxxxxx 3
b1011010110xxxxxx B
b1011010110xxxxxx ;"
1$
x"
0^
b11000 8
b11000 p
b11000 ."
b11000 /"
b11000 @"
b10010 9
b10010 a
b10010 )"
b10010 *"
b10010 ?"
b1100 :
b1100 R
b1100 $"
b1100 %"
b1100 >"
b110 H
b110 ;
b110 C
b110 }
b110 ~
b110 ="
1%
#60000
0%
#65000
0P
1_
0U
1d
1A
17
b1011010110xxxxxxx 3
b1011010110xxxxxxx B
b1011010110xxxxxxx ;"
16
b11010110xxxxxxxxx 2
b11010110xxxxxxxxx Q
b11010110xxxxxxxxx :"
05
b10110xxxxxxxxxxx 1
b10110xxxxxxxxxxx `
b10110xxxxxxxxxxx 9"
b100 0"
b110 1"
b1000 2"
b100 /
b100 ?
b100 D"
b110 .
b110 N
b110 C"
b1000 -
b1000 ]
b1000 B"
0$
0@
1#
b1000 H
b111 ;
b111 C
b111 }
b111 ~
b111 ="
b1110 W
b1101 :
b1101 R
b1101 $"
b1101 %"
b1101 >"
b10011 f
b10011 9
b10011 a
b10011 )"
b10011 *"
b10011 ?"
b11001 8
b11001 p
b11001 ."
b11001 /"
b11001 @"
1%
#70000
0%
